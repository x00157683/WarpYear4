
@using System.Net;
@using Client.Components.Public.Warp
@using Client.Services
@using System.Net.Http.Json;
@using global::Shared.Models

<AuthorizeView Roles="Administrator">
	<Authorized Context="Auth">
		<main class="admin-area-main">
			<Client.Components.Admin.Sidebar />

			<div class="admin-area-content container-fluid bg-white">
				<div class="row g-0">
					<div class="col">

						<h1 class="mb-4">@(_createSuccessful ? "Success! Go back to all cars to see the created car." : "Create car")</h1>

						@if (_attemptingToCreate == true)
						{
							<h1>Creating car...</h1>
							<LoadingDot />
						}
						else if (_createSuccessful == false && _attemptingToCreate == false)
						{
							<EditForm Model="_carToCreate" OnValidSubmit="CreateCar">
								<DataAnnotationsValidator />

								@if (InMemoryDatabaseCache.Categories == null)
								{
									<LoadingDot />
								}
								else
								{
									<div class="form-group mb-5">
										<label for="carCategory">Category</label>
										<InputSelect @bind-Value="@_carToCreate.CategoryId" class="form-control" id="carCategory">
											@foreach (var category in InMemoryDatabaseCache.Categories)
											{
										<option value="@category.CategoryId">@category.Name</option>
											}
								</InputSelect>
							</div>
								}

								<div class="form-group mb-5">
									<label for="carMake">Car Make</label>
									<InputText @bind-Value="_carToCreate.Make" class="form-control" id="carMake"></InputText>
								</div>

								<div class="form-group mb-5">
									<label for="carRange">Car Range</label>
									<InputNumber @bind-Value="_carToCreate.Range" class="form-control" id="carRange"></InputNumber>
								</div>

								<div class="form-group mb-5">
									<label for="carPricePerUnti">Car Price Per Unit</label>
									<InputNumber @bind-Value="_carToCreate.PricePerUnit" class="form-control" id="carPrice"></InputNumber>
								</div>
						
								<div class="form-group mb-5">
									<label for="carModel">Car Model</label>
									<InputText @bind-Value="_carToCreate.Model" class="form-control" id="carModel"></InputText>
								</div>

							

								<div class="form-group mb-5">
									<label for="carActive">Car Active</label>
									<InputCheckbox @bind-Value="@_carToCreate.Active" class="form-check-input" id="carActive" aria-describedby="carActiveHelp" />
									<div id="carActiveHelp" class="form-text">
										The value of this specifies whether this car is visible on the user facing site or not.
										
									</div>
								</div>

						
								<ValidationSummary />

								<button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
									<i class="far fa-save"></i> Save
								</button>

							</EditForm>
						}

						<a href="/admin/cars" class="btn btn-primary shadow mt-5 md-f-size-1-5">
							<i class="fas fa-arrow-left"></i> Back to all cars
						</a>
					</div>
				</div>
			</div>
		</main>
	</Authorized>
	<NotAuthorized>
		<Client.Components.Admin.SignIn />
	</NotAuthorized>
</AuthorizeView>

@code
{
	[Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
	[Inject] IJSRuntime JSRuntime { get; set; }
	private ElementReference _quillJSEditorDiv;
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			if (InMemoryDatabaseCache.Categories == null)
			{
				await InMemoryDatabaseCache.GetCategoriesFromDatabaseAndCache(false);
				StateHasChanged();
			}

			await JSRuntime.InvokeVoidAsync("QuillFunctions.createQuill", _quillJSEditorDiv, true);
		}
	}

	[Inject] HttpClient HttpClient { get; set; }
	private CarDTO _carToCreate = new CarDTO() {  };
	private bool _attemptingToCreate = false;
	private bool _attemptToCreateFailed = false;
	private bool _createSuccessful = false;
	private async Task CreateCar()
	{
		_attemptingToCreate = true;


		HttpResponseMessage response = await HttpClient.PostAsJsonAsync<CarDTO>(APIEndpoints.s_cars, _carToCreate);

		

		if (response.StatusCode == HttpStatusCode.Created)
		{
			Car addedCar = await response.Content.ReadFromJsonAsync<Car>();
		
			InMemoryDatabaseCache.Cars.Add(addedCar);

			_createSuccessful = true;
		}
		else
		{
			_attemptToCreateFailed = true;
		}

		_attemptingToCreate = false;
	}

	//@page "/admin/cars/create"
	private bool _attemptToUploadFailed = false;
	private string _reasonImageUploadFailed = null;
	}
}