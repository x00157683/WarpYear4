@page "/admin/booking"
@using System.Net

<AuthorizeView Roles="Administrator">
	<Authorized Context="Auth">
	  <Client.Components.Admin.Nav></Client.Components.Admin.Nav>

		<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Purple Admin</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <!-- endinject -->
    <!-- Plugin css for this page -->
    <!-- End plugin css for this page -->
    <!-- inject:css -->
    <!-- endinject -->
    <!-- Layout styles -->
    <link rel="stylesheet" href="assets/css/style.css">
    <!-- End layout styles -->
    <link rel="shortcut icon" href="assets/images/favicon.ico" />
  </head>
  <body>
   
      <!-- partial:partials/_navbar.html -->
      <div>
      
      <!-- partial -->
      <div class="container-fluid page-body-wrapper">
        <!-- partial:partials/_sidebar.html -->
  <nav class="sidebar sidebar-offcanvas" id="sidebar">
          <ul class="nav">
            <li class="nav-item nav-profile">
              <a href="#" class="nav-link">
                <div class="nav-profile-image">
                  <!--<img src="" alt="profile">-->
                  <span class="login-status online"></span>
                  <!--change to offline or busy as needed-->
                </div>
                <div class="nav-profile-text d-flex flex-column">
                  <span class="font-weight-bold mb-2">Admin</span>
                 
                </div>
                <i class="mdi mdi-bookmark-check text-success nav-profile-badge"></i>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin">
                <span class="menu-title">Home</span>
                <i class="mdi mdi-home menu-icon"></i>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/cars">
                <span class="menu-title">Cars</span>
                <i class="menu-arrow"></i>
                <i class="mdi mdi-car-connected menu-icon"></i>
              </a>      
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/booking">
                <span class="menu-title">Bookings</span>
                <i class="mdi mdi-contacts menu-icon"></i>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/admin/users">
                <span class="menu-title">Users</span>
                <i class="mdi mdi-format-list-bulleted menu-icon"></i>
              </a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="pages/charts/chartjs.html">
                <span class="menu-title">Charts</span>
                <i class="mdi mdi-chart-bar menu-icon"></i>
              </a>
            </li>
 
         
          </ul>
        </nav>
        <!-- partial -->
        <div class="main-panel">
          <div class="content-wrapper">
            <div class="page-header">
              <h3 class="page-title">
                <span class="page-title-icon bg-gradient-primary text-white me-2">
                  <i class="mdi mdi-home"></i>
                </span> Home
              </h3>
              <nav aria-label="breadcrumb">
                <ul class="breadcrumb">
                  <li class="breadcrumb-item active" aria-current="page">
                    <span></span>Overview <i class="mdi mdi-alert-circle-outline icon-sm text-primary align-middle"></i>
                  </li>
                </ul>
              </nav>
            </div>
          <div class="row g-0">
					<div class="col">
						<h1>Bookings</h1>
						<br />
						<hr />
						<br />

						@if (InMemoryDatabaseCache.Bookings == null || _attemptingToDeleteABooking == true)
						{
							<LoadingDot />
						}
						else
						{
							<a href="/admin/bookings/create" class="btn btn-success shadow me-5 md-f-size-1-5">
								<i class="fas fa-plus"></i> Create booking
							</a>

							<button @onclick="() => InMemoryDatabaseCache.GetBookingsFromDatabaseAndCache()" class="btn btn-primary shadow md-f-size-1-5">
								<i class="fas fa-sync"></i> Refresh data
							</button>

							<br />
							<br />
							<br />

							@if (InMemoryDatabaseCache.Bookings.Count < 1)
							{
								<h1>No bookings found. Please create one.</h1>
							}
							else
							{
								<div class="table-responsive">
									<table class="table table-striped table-bordered table-sm">
										<thead>
											<tr>
												<th scope="col">BookingId</th>
												<th scope="col">Cost</th>
												<th scope="col">Complete</th>
									
											</tr>
										</thead>
										<tbody>
											@foreach (var booking in InMemoryDatabaseCache.Bookings)
											{
												<tr>
													<th class="w-8" scope="row">
														<p>@booking.BookingId</p>
													</th>
												
													<td class="w-8">
														<p>@booking.Cost</p>
													</td>
													<td class="w-8">
														<p>@booking.IsComplete</p>
													</td>
								
												
													<td class="w-14">
														<div class="d-flex flex-column">

														

															<br />

															<button @onclick="(() => DeleteBooking(booking))" class="btn btn-danger shadow md-f-size-1-5">
																<i class="fas fa-trash"></i> Delete
															</button>
														</div>
													</td>
												</tr>
											}
										</tbody>
									</table>
								</div>
							}
						}

						<div class="position-fixed bottom-0 end-5 z-index-5">

							@if (_successfullyDeletedABooking == true)
							{
								<Toast IsError="false" ToastTitle="Successfully deleted a booking."
								   ToastBody="The booking has been removed from the database."
								   ParentMethodToCallOnClickBtnClose="() => _successfullyDeletedABooking = false" />
							}

							@if (_unsuccessfullyTriedToDeleteABooking == true)
							{
								<Toast IsError="true" ToastTitle="Delete failed."
								   ToastBody="@($"The reason is \"{_reasonUnsuccessfullyTriedToDeleteABooking}\" Please try again and if the issue persists contact the administrator.")"
								   ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedToDeleteABooking = false" />
							}

						

							@if (_unsuccessfullyTriedToPublishOrUnpublish == true)
							{
								<Toast IsError="true" ToastTitle="Publish or unpublish failed."
								   ToastBody="Something went wrong when communicating with the server. Please try again and if the issue persists contact the administrator."
								   ParentMethodToCallOnClickBtnClose="() => _unsuccessfullyTriedToPublishOrUnpublish = false" />
							}

						</div>

					</div>
				</div>
       
  
          </div>
          <!-- content-wrapper ends -->
          <!-- partial:partials/_footer.html -->
          <footer class="footer">
            <div class="container-fluid d-flex justify-content-between">
              
            </div>
          </footer>
          <!-- partial -->
        </div>
        <!-- main-panel ends -->
      </div>
      <!-- page-body-wrapper ends -->
    </div>
    <!-- container-scroller -->
    <!-- plugins:js -->
   
    <!-- End custom js for this page -->
  </body>
</html>
		
	</Authorized>
	<NotAuthorized>
		<Client.Components.Admin.SignIn />
	</NotAuthorized>
</AuthorizeView>

@implements IDisposable
@code
{
	[Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
	protected override async Task OnInitializedAsync()
	{
		InMemoryDatabaseCache.OnBookingsDataChanged += StateHasChanged;

		if (InMemoryDatabaseCache.Bookings == null)
		{
			await InMemoryDatabaseCache.GetBookingsFromDatabaseAndCache();
		}
	}

	public void Dispose() => InMemoryDatabaseCache.OnBookingsDataChanged -= StateHasChanged;

	[Inject] HttpClient HttpClient { get; set; }
	private bool _attemptingToDeleteABooking = false;
	private bool _successfullyDeletedABooking = false;
	private bool _unsuccessfullyTriedToDeleteABooking = false;
	private string _reasonUnsuccessfullyTriedToDeleteABooking = null;
	private async void DeleteBooking(Booking bookingToDelete)
	{
		_attemptingToDeleteABooking = true;

		HttpResponseMessage response = await HttpClient.DeleteAsync($"{APIEndpoints.s_bookings}/{bookingToDelete.BookingId}");

		if (response.StatusCode == HttpStatusCode.NoContent)
		{
			if (InMemoryDatabaseCache.Bookings.Remove(bookingToDelete))
			{
				_successfullyDeletedABooking = true;
			}
			else
			{
				_reasonUnsuccessfullyTriedToDeleteABooking = "An unexpected error has occurred. Please try again and if the issue persists contact the administrator.";
				_unsuccessfullyTriedToDeleteABooking = true;
			}
		}
		else
		{
			_reasonUnsuccessfullyTriedToDeleteABooking = $"The API didn't return an HttpStatusCode.NoContent status code. Instead the API returned the status code {response.StatusCode} and gave the following reason for failure: {response.ReasonPhrase}.";
			_unsuccessfullyTriedToDeleteABooking = true;
		}

		_attemptingToDeleteABooking = false;
		StateHasChanged();
	}

	private bool _successfullyPublishedOrUnpublished = false;
	private bool _unsuccessfullyTriedToPublishOrUnpublish = false;
	private Booking _lastPublishedOrUnpublishedBooking = null;
	private async Task PublishOrUnpublishBooking(Booking bookingToPublishOrUnpublish)
	{
		bookingToPublishOrUnpublish.IsCreated = !bookingToPublishOrUnpublish.IsCreated;

		HttpResponseMessage httpResponseMessage = await HttpClient.PutAsJsonAsync<Booking>($"{APIEndpoints.s_bookings}/{bookingToPublishOrUnpublish.BookingId}", bookingToPublishOrUnpublish);

		if (httpResponseMessage.StatusCode == HttpStatusCode.Created)
		{
			Booking updatedBooking = await httpResponseMessage.Content.ReadFromJsonAsync<Booking>();

			_lastPublishedOrUnpublishedBooking = updatedBooking;

			Booking uneditedBookingInList = await InMemoryDatabaseCache.GetBookingByBookingId(bookingToPublishOrUnpublish.BookingId);
			uneditedBookingInList.IsCreated = updatedBooking.IsCreated;
			

			_successfullyPublishedOrUnpublished = true;
		}
		else
		{
			_unsuccessfullyTriedToPublishOrUnpublish = true;
		}
	}
}