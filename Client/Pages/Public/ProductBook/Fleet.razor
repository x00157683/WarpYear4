@page "/fleet"
@inject HttpClient Http
@implements IDisposable
@using Blazored.LocalStorage
@using Client.Components.Public.Shared
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using Newtonsoft.Json
@using global::Shared.Models
@using System.Net.Http.Headers
@using System.Collections.Generic;
@using System.Text.Json;
@using System.Net.Http;
@using Blazorise


<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Warp</title>
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="assets/css/">

    <link rel="shortcut icon" href="assets/images/favicon.ico" />
</head>



<NavB />

<PageTitle>Warp</PageTitle>

<body class="d-flex flex-column h-100">


    <!--The div element for the map -->
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->



    <main class="flex-shrink-0">

        <div id="map"></div>


        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <section class="py-5">
            <div class="container px-5 my-5">
                <div class="row gx-5 justify-content-center">
                    <div class="col-lg-8 col-xl-6">
                        <div class="text-center">
                            <h2 class="fw-bolder">From our Feet</h2>
                      <NotAuthorizeView>
                          <div class="px-2">
                          <a href="/register" class="my-3 btn btn-primary stretched-link">Sign Up</a>
                          <br />
                          </div>
                          </NotAuthorizeView>
                        </div>
                    </div>
                </div>

                <div class="row gx-5">

                    @if (_cars != null)
                    {
                        foreach (var x in _cars)
                        {

                            <div class="col-4">
                                <div class="card shadow mb-2">
                                    <img src="@($"https://dummyimage.com/600x350/ced4da/6c757d")" class="card-img-top" alt="Category thumbnail image" />
                                    <div class="card-body">

                                        <h3 class="card-title"> @x.Make @x.Model</h3>
                                        <p class="card-text"></p>
                                        <p class="card-text">Range: @x.Range</p>
                                        <p class="card-text">Hour $@x.PricePerUnit</p>
                                        <p class="card-text">Day $80</p>

                                        
                                          <Rating Color="Color.Primary" @bind-SelectedValue="@x.OverallRating" MaxValue="5" />
                                    <p> @x.OverallRating</p>
                                    </div>
                                    <AuthorizeView>
                                        <a href="/bookcar/@x.CarId" class="btn btn-primary stretched-link">Book</a>
                                    </AuthorizeView>
                               
                                </div>
                            </div>
                            <br />
                        }
                    }
                </div>
            </div>
            <!-- Call to action-->
        </section>
    </main>
    <!-- Footer-->
    <footer class="bg-dark py-4 mt-auto">
        <div class="container px-5">
            <div class="row align-items-center justify-content-between flex-column flex-sm-row">
                <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
                <div class="col-auto">
                    <a class="link-light small" href="#!">Privacy</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Terms</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Contact</a>
                </div>
            </div>
        </div>
    </footer>

</body>


@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Parameter] public Car Cars { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }


    List<Car> _cars = new List<Car>();

    int SelectedValue { get; set; } 

    private static readonly HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);

        _cars = await response.Content.ReadFromJsonAsync<List<Car>>();

        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

    }

    public int GetRating(int id){

        return 1;

    }

    public void Dispose()
    {

        InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    }


}

