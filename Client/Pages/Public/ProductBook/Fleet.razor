@page "/fleet"
@inject HttpClient Http
@implements IDisposable
@using Blazored.LocalStorage
@using Client.Components.Public.Shared
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using Newtonsoft.Json
@using global::Shared.Models
@using System.Net.Http.Headers
@using System.Collections.Generic;
@using System.Text.Json;
@using System.Net.Http;
@using Blazorise


<NavB />
<main class="flex-shrink-0">

    <section class="py-5">
        <div class="container px-5 my-5">
            <div class="row gx-5 justify-content-center">
                <div class="col-lg-8 col-xl-6">
                    <div class="text-center">
                        <h2 class="fw-bolder">From our Feet</h2>

                            <!-- If Not Signed in -->
                        <NotAuthorizeView>
                            @if (_isSignedOut == true)
                            {
                                <div class="px-2">
                                    <a href="/register" class="my-3 btn btn-primary stretched-link">Sign Up</a>
                                    <br />
                                </div>
                            }
                        </NotAuthorizeView>
                    </div>
                </div>
            </div>

            <div class="row gx-5 " id="ads">

                @if (_cars != null)
                {
                    foreach (var x in _cars)
                    {
                        <div class="col-md-4 py-2">
                            <div class="card rounded shadow mb-2">
                                <div class="card-image">
                                    <span class="card-notify-badge">@x.Category.Name</span>
                                    <span class="card-notify-year">2021</span>
                                    <img class="img-fluid" src="https://imageonthefly.autodatadirect.com/images/?USER=eDealer&PW=edealer872&IMG=CAC80HOC021B121001.jpg&width=440&height=262" alt="Alternate Text" />
                                </div>
                                <div class="card-image-overlay m-auto">
                                    <span class="card-detail-badge">$80 p/d</span>
                                    <span class="card-detail-badge">@x.PricePerUnit p/h</span>
                                    <span class="card-detail-badge">Distance: @x.Range KM</span>
                                    <span class="card-detail-badge">Distance: @x.Rating KM</span>
                                </div>
                                <div class="card-body text-center">
                                    <div class="ad-title m-auto">
                                        <h5>@x.Make @x.Model</h5>
                                    </div>
                                    <a class="ad-btn" href="/bookcar/@x.CarId">View</a>
                                </div>
                            </div>
                        </div>
                        <br />
                        <br />

                    }
                }
            </div>
        </div>
    </section>
</main>
<!-- Footer-->
<footer class="bg-dark py-4 mt-auto">
    <div class="container px-5">
        <div class="row align-items-center justify-content-between flex-column flex-sm-row">
            <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
            <div class="col-auto">
                <a class="link-light small" href="#!">Privacy</a>
                <span class="text-white mx-1">&middot;</span>
                <a class="link-light small" href="#!">Terms</a>
                <span class="text-white mx-1">&middot;</span>
                <a class="link-light small" href="#!">Contact</a>
            </div>
        </div>
    </div>
</footer>




@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Parameter] public int Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }
    bool _isSignedOut { get; set; } = true;

    List<Car> _cars = new List<Car>();

    int SelectedValue { get; set; }
    int OverallValue { get; set; }

    private static readonly HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);

        _cars = await response.Content.ReadFromJsonAsync<List<Car>>();

        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

        //checking if user is signed in and authenticated
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;



        if (user.Identity.IsAuthenticated == true)
        {
            _isSignedOut = false;
        }

    }

    public void Dispose()
    {

        InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    }


}

