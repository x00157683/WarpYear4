@page "/receipt/{Id}"
@inject HttpClient Http
@implements IDisposable
@using Blazored.LocalStorage
@using Client.Components.Public.Shared
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using Newtonsoft.Json
@using System.Net
@using global::Shared.Models
@using System.Net.Http.Headers
@using System.Collections.Generic;
@using System.Text.Json;
@using System.Net.Http;
@using Blazorise


<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Warp</title>
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="assets/css/">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.1/dist/css/bootstrap.min.css" integrity="sha384-zCbKRCUGaJDkqS1kPbPd7TveP5iyJE0EjAuZQTgFLD2ylzuqKfdKlfG/eSrtxUkn" crossorigin="anonymous">
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css">

    <link href="_content/Blazorise/blazorise.css" rel="stylesheet" />
    <link href="_content/Blazorise.Bootstrap/blazorise.bootstrap.css" rel="stylesheet" />

    <link rel="shortcut icon" href="assets/images/favicon.ico" />

</head>



<NavB />

<PageTitle>Warp</PageTitle>

<body class="d-flex flex-column h-100">


    <!--The div element for the map -->
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->



    <main class="flex-shrink-0">

        <div id="map"></div>


        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <section class="py-5">
            <div class="container px-5 my-5">
                <div class="row gx-5 justify-content-center">
                    <div class="col-lg-8 col-xl-6">
                        <div class="text-center">
                            <h2 class="fw-bolder">From our Fleet</h2>
                            <p class="lead fw-normal text-muted mb-5">
                                Lorem ipsum, dolor sit amet consectetur adipisicing elit.
                                Eaque fugit ratione dicta mollitia. Officiis ad.
                            </p>
                        </div>
                    </div>
                </div>

                <div class="row gx-5">


                    <h2>Thank You for Using Warp </h2>
                    <h3> The following amount has been deducted from your account </h3>

                    @if (ThisBooking != null)
                    {

                        <div class="col-4">
                        </div>
                        <div class="col-4">
                            <div class="card shadow mb-2">

                                <div class="card-body">

                                    <h3 class="card-title"><b>Total: </b>@ThisBooking.Cost</h3>
                                    <p class="card-text"><b>Start Time:</b> @ThisBooking.StartTime </p>
                                    <p class="card-text"><b>Stop Time</b> @ThisBooking.StopTime </p>
                                    <p class="card-text>"><b>Email: </b>@ThisBooking.UserEmail</p>
                                    <p> Don'f forget to rate your driving experience</p>
                                    <Rating Color="Color.Primary" @bind-SelectedValue="@SelectedValue" MaxValue="5" />
                                    <p>input: @SelectedValue</p>
                                    <button onclick="@RateCar">Submit</button>

                                </div>


                            </div>
                        </div>

                    }





                </div>
            </div>
            <!-- Call to action-->
        </section>
    </main>
    <!-- Footer-->
    <footer class="bg-dark py-4 mt-auto">
        <div class="container px-5">
            <div class="row align-items-center justify-content-between flex-column flex-sm-row">
                <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
                <div class="col-auto">
                    <a class="link-light small" href="#!">Privacy</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Terms</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Contact</a>
                </div>
            </div>
        </div>
    </footer>

</body>



@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService? LocalStorageService { get; set; }
    [Inject] NavigationManager? NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache? InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    [Parameter] public string Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState>? AuthenticationState { get; set; }


    List<Car>? _cars = null;
    List<AppUser>? _users = null;
    List<Booking>? _bookings = null;
    AppUser? _user = null;


    Booking ThisBooking = new Booking();

    TimeSpan elapsed = new TimeSpan();

    double hours, mins = 0.0;

    int SelectedValue { get; set; } = 0;



    private static readonly HttpClient client = new HttpClient();



    protected override async Task OnInitializedAsync()
    {
        _users = await HttpClient.GetFromJsonAsync<List<AppUser>>(APIEndpoints.s_users);

        _bookings = await HttpClient.GetFromJsonAsync<List<Booking>>(APIEndpoints.s_bookings);

        elapsed = await GetDuration();



        hours = Math.Round(elapsed.TotalHours, 2);
        mins = Math.Round(elapsed.TotalMinutes, 2);
        Console.WriteLine(hours + " " + mins, " ");
        HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);

        TimeSpan s = elapsed.Duration();
        hours = elapsed.Hours;
        mins = elapsed.Minutes;
        Console.WriteLine(hours + " " + mins, " ");
        Console.WriteLine(s.Hours);

        _cars = await response.Content.ReadFromJsonAsync<List<Car>>();


        foreach (var i in _bookings)
        {
            if (i.BookingId == Id)
            {
                ThisBooking = i;
            }
        }

        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

        var user = (await AuthenticationState).User;

        if (user.Identity.IsAuthenticated == true)
        {

        }

    }

    private async Task<AppUser> GetUser()
    {

        var user2 = (await AuthenticationState).User;

        AppUser _user = _users.Where(m => m.Email == user2.Identity.Name).FirstOrDefault();

        return _user;
    }

    public async Task<TimeSpan> GetDuration()
    {
        DateTime _dObject = new DateTime();
        DateTime currentDate = new DateTime();


        _dObject = Convert.ToDateTime(ThisBooking.StartTime);


        currentDate = DateTime.Now;
        long elapsedTicks = currentDate.Ticks - _dObject.Ticks;
        TimeSpan elapsedSpan = new TimeSpan(elapsedTicks);

        return elapsedSpan;

    }
    private async Task<Car> GetCar(int id)
    {

        Car _car = _cars.Where(m => m.CarId == id).FirstOrDefault();

        return _car;
    }
    private async Task RateCar()
    {
        Car _carToBeUpdated = await GetCar(ThisBooking.CarId);

        CarDTO _car = new CarDTO();

        _car.CarDTOId = ThisBooking.CarId;
        _car.CategoryId = _carToBeUpdated.CategoryId;
        _car.Make = _carToBeUpdated.Make;
        _car.Model = _carToBeUpdated.Model;
        _car.Active = _carToBeUpdated.Active;
        _car.PricePerUnit = _carToBeUpdated.PricePerUnit;
        _car.isLocked = _carToBeUpdated.isLocked;
        _car.Range = _carToBeUpdated.Range;
        _car.Rating += SelectedValue;

        if (HttpClient != null)
        {
            HttpResponseMessage response = await HttpClient.PutAsJsonAsync<CarDTO>($"{APIEndpoints.s_cars}/{_car.CarDTOId}", _car);

            if (response.StatusCode == HttpStatusCode.Created)
            {

                NavigationManager.NavigateTo($"/");

            }
            else
            {
                Console.WriteLine("Failed");
            }
        }

    }


    public void Dispose()
    {

        InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    }

}

