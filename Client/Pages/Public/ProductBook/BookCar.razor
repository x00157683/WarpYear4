@page "/bookcar/{Id:int}"
@inject HttpClient Http
@using Blazored.LocalStorage
@using Client.Components.Public.Shared
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using Newtonsoft.Json
@using System.Net
@using global::Shared.Models
@using System.Net.Http.Headers
@using System.Collections.Generic;
@using System.Text.Json;
@using System.Net.Http;


<NavB />

<PageTitle>Warp</PageTitle>

<body class="d-flex flex-column h-100">


    <!--The div element for the map -->
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->



    <main class="flex-shrink-0">

        <div id="map"></div>


        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <section class="py-5">
            <div class="container px-5 my-5">
                <div class="row gx-5 justify-content-center">
                    <div class="col-lg-8 col-xl-6">
                        <div class="text-center">
                            <h5 class="fw-bolder">Insurance Included</h5>
                            <h5 class="fw-bolder">First 20Km Free</h5>
                        </div>
                    </div>
                </div>





                <div class="row gx-5">

                    @if (ThisCar != null)
                    {
                       
                                <div class="row">

                                    <RadzenCard class="m-3">
                                        <h3 class="h5">Car Information</h3>
                                        <div class="row">
                                            <div class="col-md-4">
                                                <div>Make</div>
                                                <b>@(@ThisCar.Make) @(@ThisCar.Model)</b>
                                                <div class="mt-3">Vehicle Class:</div>
                                                <b>@(@ThisCar.Category.Name)</b>
                                            </div>
                                            <div class="col-md-8">
                                                <div>Distance</div>
                                                <b>@ThisCar.Range Km</b>
                                                <div class="mt-3">Hourly Rate</div>
                                                <b>@String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}",@ThisCar.PricePerUnit)</b>


                                            </div>
                                        </div>
                                        <div class="row">
                                            <h3>
                                                <RadzenCheckBox @bind-Value="@showMarker">

                                                </RadzenCheckBox>
                                            </h3>

                                            <RadzenGoogleMap style="height:450px; width:850px;" Zoom="13" Center="@(new GoogleMapPosition(){Lat=ThisCar.Lat, Lng =ThisCar.Lng })" MapClick="@OnMapClick" MarkerClick="@OnMarkerClick">

                                                <Markers>
                                                    
                                                
                                                            
                                                       <RadzenGoogleMapMarker Title="@ThisCar.Make" Label="@ThisCar.Model" Position="@(new GoogleMapPosition(){Lat=ThisCar.Lat, Lng =ThisCar.Lng })"></RadzenGoogleMapMarker>
                                                    
                                                </Markers>

                                            </RadzenGoogleMap>

                                            <label>Position: </label> @clickedPositon
                                            <EditForm Model="_booking" OnValidSubmit="CreateBooking">
                                                <DataAnnotationsValidator />
                                                <ValidationSummary />

                                                <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                                                    <i class="far fa-save"></i> Reserve
                                                </button>

                                            </EditForm>

                                        </div>
                                    </RadzenCard>
                                </div>

                            }
                    }
                </div>

            </div>

            <!-- Call to action-->
        </section>
    </main>
    <!-- Footer-->
    <footer class="bg-dark py-4 mt-auto">
        <div class="container px-5">
            <div class="row align-items-center justify-content-between flex-column flex-sm-row">
                <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
                <div class="col-auto">
                    <a class="link-light small" href="#!">Privacy</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Terms</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Contact</a>
                </div>
            </div>
        </div>
    </footer>

</body>


@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Parameter] public int Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }


    List<Car> _cars = null;
    List<AppUser> _users = null;
    AppUser _user = new AppUser();

    private BookingDTO _booking = new BookingDTO();
    Car ThisCar = null;
    public DateTime? StartValue { get; set; } = DateTime.Now;
    public DateTime? EndValue { get; set; } = DateTime.Now.AddDays(10);
    public int zoom = 7;
    bool showMarker;
    string clickedPositon = "";
    private static readonly HttpClient client = new HttpClient();

    void OnMapClick(GoogleMapClickEventArgs args)
    {
        clickedPositon = $"Map is clicked LAT :{args.Position.Lat} LNG :{args.Position.Lng}";

    }

    void OnMarkerClick(RadzenGoogleMapMarker args)
    {
        clickedPositon = $" {args.Title} is clicked LAT :{args.Position.Lat} LNG :{args.Position.Lng}";

    }

    protected override async Task OnInitializedAsync()
    {
         HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);


        _cars = await response.Content.ReadFromJsonAsync<List<Car>>();

         _users = await HttpClient.GetFromJsonAsync<List<AppUser>>(APIEndpoints.s_users);

        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

       

       


        AppUser _user = await GetUser();

        foreach (var i in _cars)
        {
            if (i.CarId == Id)
            {
                ThisCar = i;
            }
        }

    }

    private async Task<AppUser> GetUser()
    {

        var user2 = (await AuthenticationState).User;

        Console.WriteLine("In GetUser" + user2.Identity.Name.ToString());

        AppUser _user = _users.Where(m => m.Email == user2.Identity.Name).FirstOrDefault();

        Console.WriteLine("In user???" + _user.Email);

        return _user;
    }

    private async Task CreateBooking()
    {

        AppUser _user = await GetUser();

        _booking.BookingDTOId = Guid.NewGuid().ToString();

        _booking.UserEmail = _user.Email;

        _booking.CarId = Id;

        _booking.Location = "Dublin";

        _booking.IsCreated = true;

        _booking.IsComplete = false;

        _booking.StartTime = DateTime.UtcNow.ToString();



        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<BookingDTO>(APIEndpoints.s_book, _booking);





        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/bookcomplete/{_booking.BookingDTOId}");
        }
        else
        {
            string serverError = await response.Content.ReadAsStringAsync();
            String error = $"{serverError} The following error has occured";


        }


    }




}

