@page "/bookcomplete/{Id}"
@inject HttpClient Http
@implements IDisposable
@using Blazored.LocalStorage
@using Client.Components.Public.Shared
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using Newtonsoft.Json
@using System.Net
@using global::Shared.Models
@using System.Net.Http.Headers
using System.Collections.Generic;
using System.Text.Json;
using System.Net.Http;


<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Warp</title>
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="assets/css/">

    <link rel="shortcut icon" href="assets/images/favicon.ico" />
</head>



<NavB />

<PageTitle>Warp</PageTitle>

<body class="d-flex flex-column h-100">


    <!--The div element for the map -->
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->



    <main class="flex-shrink-0">

       


        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <section class="py-5">
            <div class="container px-5 my-5">
                <div class="row gx-5 justify-content-center">
                    <div class="col-lg-8 col-xl-6">
                        <div class="text-center">
                            <h2 class="fw-bolder">From our Fleet</h2>
                            <p class="lead fw-normal text-muted mb-5">
                                Lorem ipsum, dolor sit amet consectetur adipisicing elit.
                                Eaque fugit ratione dicta mollitia. Officiis ad.
                            </p>
                        </div>
                    </div>
                </div>

                <div class="row gx-5">

                    <h2>Car is now available to unlock</h2>

                    <p>Keys will be inside the passenger glove box</p>



               
                </div>
            </div>
            <!-- Call to action-->
        </section>
    </main>
    <!-- Footer-->
    <footer class="bg-dark py-4 mt-auto">
        <div class="container px-5">
            <div class="row align-items-center justify-content-between flex-column flex-sm-row">
                <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
                <div class="col-auto">
                    <a class="link-light small" href="#!">Privacy</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Terms</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Contact</a>
                </div>
            </div>
        </div>
    </footer>

</body>


@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService? LocalStorageService { get; set; }
    [Inject] NavigationManager? NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache? InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    [Parameter] public string Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState>? AuthenticationState { get; set; }


    List<Car>? _cars = null;
    List<AppUser>? _users = null;
    List<Booking>? _bookings = null;
    AppUser ?_user = null;

    Booking? ThisCar = null;

    private static readonly HttpClient client = new HttpClient();



    protected override async Task OnInitializedAsync()
    {
        _users = await HttpClient.GetFromJsonAsync<List<AppUser>>(APIEndpoints.s_users);

        _bookings = await HttpClient.GetFromJsonAsync<List<Booking>>(APIEndpoints.s_bookings);


        HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);


        _cars = await response.Content.ReadFromJsonAsync<List<Car>>();


        foreach (var i in _bookings)
        {
            if (i.BookingId == Id)
            {
                ThisCar = i;
            }
        }

        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

        var user = (await AuthenticationState).User;

        if (user.Identity.IsAuthenticated == true)
        {

        }

    }

    private async Task<AppUser> GetUser(){

        var user2 = (await AuthenticationState).User;

        AppUser _user = _users.Where(m => m.Email == user2.Identity.Name).FirstOrDefault();

        return _user;
    }

    public void Dispose()
    {

        InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    }

}

