@page "/register"
@using System.Net;
@using Client.Components.Public.Warp
@using Client.Services
@using System.Net.Http.Json;
@using global::Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using System.Text;


<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Purple Admin</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <!-- endinject -->
    <!-- Plugin css for this page -->
    <!-- End plugin css for this page -->
    <!-- inject:css -->
    <!-- endinject -->
    <!-- Layout styles -->
    <link rel="stylesheet" href="assets/css/style.css">
    <!-- End layout styles -->
    <link rel="shortcut icon" href="assets/images/favicon.ico" />

</head>
<Client.Components.Public.Shared.NavB />

<PageTitle>Warp</PageTitle>

<body class="d-flex flex-column h-100">


    <!--The div element for the map -->
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->



    <main class="flex-shrink-0">
        <!-- Navigation-->
        <!-- Header-->

        <!-- Features section-->
        <!-- Testimonial section-->
    
        <!-- Blog preview section-->
        <div id="map"></div>


        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <section class="py-5">
            <div class="container px-5 my-5">
             
                <div class="row gx-5">

                     <div class="col">
                            @if (_registerSuccessful == false)
                        {

                            <EditForm Model="_userToRegister" OnValidSubmit="RegisterUser">
                                <DataAnnotationsValidator />
                                <div class="form-group my-3">
                                    <label for="email">Email address</label>
                                    <InputText @bind-Value="_userToRegister.EmailAddress" id="email" class="form-control" />
                                    <ValidationMessage For="@(() => _userToRegister.EmailAddress)" />
                                </div>
                                <div class="form-group my-3">
                                    <label for="first">First Name</label>
                                    <InputText @bind-Value="_userToRegister.FirstName" id="first" class="form-control" />
                                    <ValidationMessage For="@(() => _userToRegister.FirstName)" />
                                </div>
                                <div class="form-group my-3">
                                    <label for="last">Last Name</label>
                                    <InputText @bind-Value="_userToRegister.LastName" id="last" class="form-control" />
                                    <ValidationMessage For="@(() => _userToRegister.LastName)" />
                                </div>

                                <div class="form-group my-3">
                                    <label for="password">Password</label>
                                    <InputText @bind-Value="_userToRegister.Password" id="password" type="password" class="form-control" />
                                    <ValidationMessage For="@(() => _userToRegister.Password)" />
                                </div>

                                <div class="form-group my-3">
                                    <label for="phonenumber">Phone Number</label>
                                    <InputText @bind-Value="_userToRegister.PhoneNumber" id="phonenumber" class="form-control" />
                                    <ValidationMessage For="@(() => _userToRegister.PhoneNumber)" />
                                </div>

                                <!-- partial
                                <div class="form-group my-3">
                                <label for="dob">Date Of Birth</label>
                                <InputDate @bind-Value="_userToCreate1.Dob" id="dob" class="form-control" />
                                <ValidationMessage For="@(() => _userToCreate1.Dob)" />
                                </div>-->

                                <ValidationSummary />

                                <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                                    <i class="far fa-save"></i> Register
                                </button>

                            </EditForm>
                            @if (_registerFailed == true)
                            {
                                <p class="my-3 text-danger"> @_attemptToRegisterFailed</p>
                            }
                          
                        
                        }
                         

                        </div>
                      
                </div>
            </div>
            <!-- Call to action-->
           

        </section>
    </main>
    <!-- Footer-->
    <footer class="bg-dark py-4 mt-auto">
        <div class="container px-5">
            <div class="row align-items-center justify-content-between flex-column flex-sm-row">
                <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
                <div class="col-auto">
                    <a class="link-light small" href="#!">Privacy</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Terms</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Contact</a>
                </div>
            </div>
        </div>
    </footer>
    <!-- Bootstrap core JS-->
    <!-- Core theme JS-->

</body>



@code
{
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Inject] HttpClient HttpClient { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }


 
    private UserDTO _userToRegister = new UserDTO() { };
    private bool _attemptingToRegister = false;
    private string? _attemptToRegisterFailed = "";
    private bool _registerSuccessful = false;
    private bool _registerFailed = false;

    private async Task RegisterUser()
    {
        _attemptingToRegister = true;


        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<UserDTO>(APIEndpoints.s_userRegister, _userToRegister);

        if (response.IsSuccessStatusCode)
        {
            _registerSuccessful = true;
            NavigationManager.NavigateTo("/signin");
        }
        else
        {
            string serverError = await response.Content.ReadAsStringAsync();
            _attemptToRegisterFailed = $"{serverError} The following error has occured";
            _registerFailed = true;

        }

        _attemptingToRegister = false;
    }

	}
}