@page "/"
@inject HttpClient Http
@implements IDisposable
@using Blazored.LocalStorage
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using global::Shared.Models
@using System.Net.Http.Headers


<!-- Navigation-->
<Client.Components.Public.Shared.NavB />

<PageTitle>Warp</PageTitle>


<main class="flex-shrink-0">

    @*Header*@
    <header class="bg-dark py-5">
        <div class="container px-5">
            <div class="row gx-5 align-items-center justify-content-center">
                <div class="col-lg-8 col-xl-7 col-xxl-6">
                    <div class="my-5 text-center text-xl-start">
                        <h1 class="display-5 fw-bolder text-white mb-2">We Speacialize in Electric</h1>
                        <p class="lead fw-normal text-white-50 mb-4">Quickly sign up and get driving in no time, we have a range of cars to suit your needs and they are all electric!</p>
                        <div class="d-grid gap-3 d-sm-flex justify-content-sm-center justify-content-xl-start">
                            <a class="btn btn-primary btn-lg px-4 me-sm-3" href="/register">Get Started</a>
                            <a class="btn btn-outline-light btn-lg px-4" href="/about">Learn More</a>
                        </div>
                    </div>
                </div>
                <div class="col-xl-5 col-xxl-6 d-none d-xl-block text-center"><img class="img-fluid rounded-3 my-5" src="Images/Tesla-Model-S-Plaid.jpeg" alt="..." /></div>
            </div>
        </div>
    </header>

    <div class="py-5 bg-light">
        <div class="container px-5 my-5">
            <div class="row gx-5 justify-content-center">
                @if (_cars != null)
                {
                    <RadzenCard class="m-3">
                        <div class="row gx-5 justify-content-center">
                            <div class="col-lg-8 col-xl-6">
                                <div class="text-center">
                                    <h2 class="">Get Driving From our Select Locations</h2>

                                </div>
                            </div>
                        </div>


                        <RadzenGoogleMap style="height:450px; width:1200px; py-6;" Zoom="8" Center="@(new GoogleMapPosition(){Lat=53.350140, Lng =-6.266155 })" MarkerClick="@OnMarkerClick">

                            <Markers>
                                <RadzenGoogleMapMarker Title="Car" Label="Car" Position="@(new GoogleMapPosition(){Lat=53.350140, Lng =-6.266155 })"></RadzenGoogleMapMarker>
                                @foreach (var i in _cars)
                                {

                                    <RadzenGoogleMapMarker Title="@i.CarId.ToString()" Label="@i.Model" Position="@(new GoogleMapPosition(){Lat=i.Lat, Lng =i.Lng })"></RadzenGoogleMapMarker>

                                }

                                @if (showMarker)
                                {

                                }
                            </Markers>

                        </RadzenGoogleMap>

                        <label>Position: </label> @clickedPositon

                    </RadzenCard>
                }
            </div>
        </div>
    </div>


    <section class="py-5">
        <div class="container px-5 my-5">
            <div class="row gx-5 justify-content-center">
                <div class="col-lg-8 col-xl-6">
                    <div class="text-center">
                        <h2 class="fw-bolder">From our Fleet</h2>
                        <p class="lead fw-normal text-muted mb-5">
                            Over 30 Cars in our range starting from $10 per hour

                        </p>
                    </div>
                </div>
            </div>
            <div class="row my-5">

                @if (_categories != null)
                {
                    @foreach (var i in _categories)
                    {
                        
                        <div class="col-lg-4 col-xl-4 offset-lg-3 offset-xl-4">
                            
                            <RadzenCard class="m-3">
                                <h3 class="h5">Contact</h3>
                                <div class="d-flex flex-row">
                                    <RadzenImage Path="Images/Tesla-Model-S-Plaid.jpeg" Class="rounded-circle float-left mr-3" Style="width: 80px; height: 80px;" />
                                    <div>
                                        <div>Tier</div>
                                        <b>@(i.Name)</b>
                                        <div class="mt-3">Price Rate</div>
                                        <b>@i.Description</b>
                                    </div>
                                </div>
                            </RadzenCard>
                            
                        </div>
                      
                    }
                }
            </div>
        </div>
        <!-- Call to action-->
    </section>
</main>
<!-- Footer-->
<footer class="bg-dark py-4 mt-auto">
    <div class="container px-5">
        <div class="row align-items-center justify-content-between flex-column flex-sm-row">
            <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
            <div class="col-auto">
                <a class="link-light small" href="#!">Privacy</a>
                <span class="text-white mx-1">&middot;</span>
                <a class="link-light small" href="#!">Terms</a>
                <span class="text-white mx-1">&middot;</span>
                <a class="link-light small" href="#!">Contact</a>
            </div>
        </div>
    </div>
</footer>
<!-- Bootstrap core JS-->
<!-- Core theme JS-->
@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Parameter] public Category Category { get; set; }
    [Parameter] public Car Cars { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }

    private static readonly HttpClient client = new HttpClient();

    List<Car> _cars = null;
    List<Category> _categories = null;


    private bool showMarker;
    string clickedPositon = "";
    public int zoom = 7;


    void OnMapClick(GoogleMapClickEventArgs args)
    {
        clickedPositon = $"Map is clicked LAT :{args.Position.Lat} LNG :{args.Position.Lng}";

    }

    void OnMarkerClick(RadzenGoogleMapMarker args)
    {

        NavigationManager.NavigateTo($"/bookcar/{args.Title}");  //Gets ID from the marker title and redirects with parameter
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);

            _cars = await response.Content.ReadFromJsonAsync<List<Car>>();

            if (await LocalStorageService.ContainKeyAsync("bearerToken"))
            {
                string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

                Console.WriteLine(savedToken);

                await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

                HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

                StateHasChanged();
            }

            InMemoryDatabaseCache.OnCategoriesDataChanged += StateHasChanged;

            if (InMemoryDatabaseCache.Categories == null)
            {
                await InMemoryDatabaseCache.GetCategoriesFromDatabaseAndCache(false);
                _categories = InMemoryDatabaseCache.Categories;

            }

            if (InMemoryDatabaseCache.Cars == null)
            {
                try
                {
                    await InMemoryDatabaseCache.GetCarsFromDatabaseAndCache();


                    _cars = InMemoryDatabaseCache.Cars;
                }
                catch (Exception e)
                {

                }
            }

        }

        catch (Exception ex)
        {


            new ErrorModelDTO()  //Error Model
                {
                    ErrorMessage = ex.Message
                };

            Console.WriteLine("Error: " + ex.Message);
        }
    }


    //Avoid Memory Leak
    public void Dispose()
    {

        InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    }

}
