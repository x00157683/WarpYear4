@page "/checkout"
@inject IPaymentService _paymentService;
@inject IJSRuntime _jsruntime;
@using System.Net;
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using System.Net.Http.Json;
@using System.Net.Http.Headers
@using Server.Services
@using global::Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using System.Text;
@using Blazored.LocalStorage


<head>
    <!-- Required meta tags -->

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Purple Admin</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">

    <link rel="stylesheet" href="assets/css/style.css">
    <!-- End layout styles -->
    <link rel="shortcut icon" href="assets/images/favicon.ico" />



</head>

<Client.Components.Public.Shared.NavB />

<PageTitle>Warp</PageTitle>

<body>
    <div class="togethere-background"></div>
    <div class="sr-root">
        <div class="sr-main">
            <header class="sr-header">
                <div class="sr-header__logo"></div>
            </header>
            <h1>Choose a collaboration plan</h1>

            <EditForm Model="_stripePayment" OnValidSubmit="HandleCheckout">
                <DataAnnotationsValidator />
                <div class="form-group my-3">
                    <label for="email">Email address</label>
                    <InputNumber @bind-Value="_stripePayment.Price" id="price" class="form-control" />
                    <ValidationMessage For="() => _stripePayment.Price" />
                </div>
                <div class="form-group my-3">
                    <label for="first">Name</label>
                    <InputText @bind-Value="_stripePayment.Name" id="name" class="form-control" />
                    <ValidationMessage For="() => _stripePayment.Name" />
                </div>
                <ValidationSummary />
                <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                    <i class="far fa-save"></i> Pay
                </button>

            </EditForm>
        </div>
    </div>
    <div id="error-message" class="error-message"></div>
</body>



@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Parameter] public string Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState>? AuthenticationState { get; set; }

    private bool _attemptingToUpdate { get; set; } = false;
    private bool _attemptToUpdateFailed { get; set; } = false;
    private bool _updateSuccessful { get; set; } = false;
    List<Car> _cars = new List<Car>();
    List<AppUser> _users = new List<AppUser>();
    List<Booking> _bookings = new List<Booking>();
    AppUser _user = new AppUser();
    StripePaymentDTO _stripePayment = new StripePaymentDTO();
    Car _car = null;
    double _cost = 0;

    TimeSpan elapsed = new TimeSpan();

    BookingDTO ThisBooking = new BookingDTO();

    private static readonly HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        try
        {
            _users = await HttpClient.GetFromJsonAsync<List<AppUser>>(APIEndpoints.s_users);

            _bookings = await HttpClient.GetFromJsonAsync<List<Booking>>(APIEndpoints.s_bookings);

            HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);

            _cars = await response.Content.ReadFromJsonAsync<List<Car>>();

            _user = await GetUser();

            ThisBooking = GetBooking();

            _car = GetCar(ThisBooking.CarId);

            elapsed = GetCost();



            _cost = Math.Round(_car.PricePerUnit * elapsed.TotalMinutes, 2);


        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.InnerException);
        }

        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

    }

    private async Task HandleCheckout()
    {


        try
        {
            var result = await _paymentService.Checkout(_stripePayment);

            await _jsruntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }


    }

    private async Task EndBooking()
    {

        _attemptingToUpdate = true;

        try
        {

            elapsed = GetCost();
            _cost = Math.Round(_car.PricePerUnit * elapsed.TotalMinutes, 2);
            ThisBooking.Cost = _cost;

        }
        catch (Exception ex)
        {

        }

        if (HttpClient != null)
        {
            HttpResponseMessage response = await HttpClient.PutAsJsonAsync<BookingDTO>($"{APIEndpoints.s_bookings}/{ThisBooking.BookingDTOId}", ThisBooking);

            if (response.StatusCode == HttpStatusCode.Created)
            {
                _attemptingToUpdate = false;
                _updateSuccessful = true;
                NavigationManager.NavigateTo($"/receipt/{ThisBooking.BookingDTOId}");

            }
            else
            {
                _attemptToUpdateFailed = true;
            }
        }
    }

    private async Task<AppUser> GetUser()
    {

        AppUser _user = new AppUser();
        if (_users != null)
        {
            var user2 = (await AuthenticationState).User;

            _user = _users.Where(m => m.Email == user2.Identity.Name).FirstOrDefault();

        }

        return _user;
    }

    private Car GetCar(int id)
    {
        Car _car = new Car();

        if (_cars != null)
        {
            _car = _cars.Where(m => m.CarId == id).FirstOrDefault();
        }
        return _car;
    }

    private BookingDTO GetBooking()
    {
        BookingDTO _book = new BookingDTO();

        if (_bookings != null)
        {
            foreach (var i in _bookings)
            {

                if (i.UserEmail == _user.Email && i.IsComplete != true)
                {
                    _book.BookingDTOId = i.BookingId;
                    _book.CarId = i.CarId;
                    _book.IsCreated = i.IsCreated;
                    _book.StartTime = i.StartTime;
                    _book.UserEmail = i.UserEmail;
                    _book.Location = i.Location;
                    _book.IsComplete = true;

                }
            }
        }
        return _book;
    }

    public TimeSpan GetCost()
    {
        DateTime _dObject = new DateTime();
        DateTime currentDate = new DateTime();


        _dObject = Convert.ToDateTime(ThisBooking.StartTime);
        currentDate = DateTime.Now;
        long elapsedTicks = currentDate.Ticks - _dObject.Ticks;
        TimeSpan elapsedSpan = new TimeSpan(elapsedTicks);

        return elapsedSpan;

    }

    public void Dispose()
    {

        InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    }

}