@page "/signin"
@using System.Net;
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using System.Net.Http.Json;
@using global::Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using System.Text;
@using Blazored.LocalStorage


<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Warp</title>
    <!-- plugins:css -->
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <!-- endinject -->
    <!-- Plugin css for this page -->
    <!-- End plugin css for this page -->
    <!-- inject:css -->
    <!-- endinject -->
    <!-- Layout styles -->
    <link rel="stylesheet" href="assets/css/style.css">
    <!-- End layout styles -->
    <link rel="shortcut icon" href="assets/images/favicon.ico" />

</head>
<Client.Components.Public.Shared.NavB />

<PageTitle>Warp</PageTitle>




<!--The div element for the map -->
<!-- Async script executes immediately and must be after any DOM elements used in callback. -->



<main class="flex-shrink-0">


    <div class="row d-flex px-3">
         <div class="col-xl-4 p-3">
             </div>
         <div class="col-xl-4 p-3">
        <RadzenCard>
            <h2 class="mb-4">Register and password reset</h2>
            <RadzenTemplateForm Data=@("LoginWithRegisterAndReset")>
                <RadzenLogin Login=@(args => OnLogin(args, "Login with register and password reset"))
                             ResetPassword=@(args => OnResetPassword(args, "Login with register and password reset"))
                             Register=@(args => OnRegister("Login with register and password reset")) />
            </RadzenTemplateForm>
        </RadzenCard>
    </div>


    </div>
    <!-- Navigation-->
    <!-- Header-->
    <!-- Features section-->
    <!-- Testimonial section-->
    <!-- Blog preview section-->
   




</main>

<!-- Bootstrap core JS-->
<!-- Core theme JS-->
<!-- Footer-->
<footer class="bg-dark py-4 mt-auto">
    <div class="container px-5">
        <div class="row align-items-center justify-content-between flex-column flex-sm-row">
            <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
            <div class="col-auto">
                <a class="link-light small" href="#!">Privacy</a>
                <span class="text-white mx-1">&middot;</span>
                <a class="link-light small" href="#!">Terms</a>
                <span class="text-white mx-1">&middot;</span>
                <a class="link-light small" href="#!">Contact</a>
            </div>
        </div>
    </div>
</footer>


@code
{
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] AuthenticationStateProvider authenticationStateProvider { get; set; }
    [Inject] AppAuthenticationStateProvider appAuthenticationStateProvider { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }


    string userName = "admin";
    string password = "admin";


    void OnLogin(LoginArgs args, string name)
    {


        SigninUser(args);
    }

    void OnRegister(string name)
    {
        NavigationManager.NavigateTo($"/register");
    }

    void OnResetPassword(string value, string name)
    {
        NavigationManager.NavigateTo($"/forgotpassword");
    }

    private User _userToSignin = new User();
    private bool _attemptingToSignin = false;
    private bool _signinSuccessful = false;
    private bool _signinFailed = false;

    private async Task SigninUser(LoginArgs args)
    {
        _attemptingToSignin = false;

        User userToSign = new User();

        userToSign.EmailAddress = args.Username;
        userToSign.Password = args.Password;

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<User>(APIEndpoints.s_signIn, userToSign);

        if (response.IsSuccessStatusCode)
        {
            string jsonWebToken = await response.Content.ReadAsStringAsync();

            await LocalStorageService.SetItemAsync("bearerToken", jsonWebToken);

            await ((AppAuthenticationStateProvider)authenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", jsonWebToken);

            _signinSuccessful = true;

            StateHasChanged();
            NavigationManager.NavigateTo("/");

        }
        else
        {
            _attemptingToSignin = true;

        }


    }

	
}