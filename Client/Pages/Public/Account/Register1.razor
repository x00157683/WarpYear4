@page "/register1"
@using System.Net;
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using System.Net.Http.Json;
@using global::Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using System.Text;
@using Blazored.LocalStorage


<head>
    <!-- Required meta tags -->


</head>


<PageTitle>Warp</PageTitle>






@if (_isSignedOut == true)
{
     <div class=" w-200 min-vh-90 justify-content-center align-items-center">

        <EditForm Model="_userToRegister" OnValidSubmit="RegisterUser" class="pt-4">
            <DataAnnotationsValidator />
            <div class="py-4">
                <div class=" row form-group ">
                    <div class="col-6 offset-3 ">
                        <div class="card border">
                            <div class="card-body px-lg-5 pt-4">
                                <h3 class="col-12 text-success text-center py-2">
                                    <strong>Sign Up</strong>
                                </h3>
                                @if (_registerSuccessful)
                                {

                                }

                                <div class="py-2">
                                    <InputText @bind-Value="_userToRegister.Name" class="form-control" placeholder="Name..." />
                                    <ValidationMessage For="(()=>_userToRegister.Name)" />
                                </div>
                                <div class="py-2">
                                    <InputText @bind-Value="_userToRegister.Email" type="text" class="form-control" placeholder="Email..." />
                                    <ValidationMessage For="(()=>_userToRegister.Email)" />
                                </div>
                                <div class="py-2 input-group">
                                    <div class="input-group-prepend">
                                        <span class="input-group-text"> +353</span>
                                    </div>
                                    <InputText @bind-Value="_userToRegister.PhoneNumber" type="text" class="form-control" placeholder="Phone number..." />
                                    <ValidationMessage For="(()=>_userToRegister.PhoneNumber)" />
                                </div>
                                <div class="form-row py-2">
                                    <div class="col">
                                        <InputText @bind-Value="_userToRegister.Password" type="password" id="password" placeholder="Password..." class="form-control" />
                                        <ValidationMessage For="(()=>_userToRegister.Password)" />
                                    </div>
                                    <div class="col py-2">
                                        <InputText @bind-Value="_userToRegister.ConfirmPassword" type="password" id="confirm" class="form-control" placeholder="Confirm Password..." />
                                        <ValidationMessage For="(()=>_userToRegister.ConfirmPassword)" />
                                    </div>
                                </div>
                                <hr style="background-color:aliceblue" />
                                <div class="py-2">
                                    <button type="submit" class="btn btn-success btn-block"><i class="bi bi-person-plus-fill"></i> Register</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
}
else
{

    <div class="d-flex w-100 min-vh-90 justify-content-center align-items-center">
	<div class="row">
		<div class="col shadow-no-hover p-5">
	       Already Signed In, Click <a href="@SignOut()"> here </a> to log out
		</div>
	</div>
</div>


}





@code
{
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Inject] HttpClient HttpClient { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }



    private UserDTO _userToRegister = new UserDTO() { };
    private bool _attemptingToRegister = false;
    private string? _attemptToRegisterFailed = "";
    private bool _registerSuccessful = false;
    private bool _registerFailed = false;
    string UserName { get; set; }

    bool _isSignedOut { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var user = (await AuthenticationState).User;

        if (user.Identity.IsAuthenticated == true)
        {
            _isSignedOut = false;
        }
    }

    private async Task RegisterUser()
    {
        _attemptingToRegister = true;


        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<UserDTO>(APIEndpoints.s_userRegister, _userToRegister);

        if (response.IsSuccessStatusCode)
        {
            _registerSuccessful = true;
            NavigationManager.NavigateTo("/registercomplete");
        }
        else
        {
            string serverError = await response.Content.ReadAsStringAsync();
            _attemptToRegisterFailed = $"{serverError} The following error has occured";
            _registerFailed = true;

        }

        _attemptingToRegister = false;
    }
    private async Task SignOut()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            await LocalStorageService.RemoveItemAsync("bearerToken");

            ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignOut();

            _isSignedOut = true;
        }

        StateHasChanged();
        NavigationManager.NavigateTo("/register1");
    }

}