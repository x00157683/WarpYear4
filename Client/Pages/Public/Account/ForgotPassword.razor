@page "/forgotpassword"
@using System.Net;
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using System.Net.Http.Json;
@using System.Net.Http.Headers
@using global::Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using System.Text;
@using Blazored.LocalStorage


<head>
    <!-- Required meta tags -->


</head>


<PageTitle>Warp</PageTitle>
<body class="d-flex flex-column h-100">
<div class=" pt-5">
    
    <EditForm Model="_email" OnValidSubmit="ResetPassword">
    <DataAnnotationsValidator/>
    <div class="py-4">
        <div class=" row form-group pt-4">
            <div class="col-6 offset-3 ">
                <div class="card border">
                    <div class="card-body px-lg-5 pt-4">
                        <h3 class="col-12 text-success text-center py-2">
                            <strong>Enter Email Address</strong>
                        </h3>

                        @if (_signinFailed)
                        {
                            <p class="text-center text-danger"></p>
                        }


                        <div class="py-2">
                               <InputText @bind-Value="_email.Email" id="email" placeholder="Email..." class="form-control mb-2" />
                               <ValidationMessage For="(()=>_email.Email)"></ValidationMessage>
                        </div>
                   
                        <div class="py-2">
                            
                                <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                                    <i class="far fa-save"></i> Reset
                                </button>
                        </div>
                    </div>
                     <div class="px-6">
                    <p>
                        <a href="/forgotpassword">Forgot your password??</a>
                    </p>
                    <p>
                        <a href="/register">Register as a new user</a>
                    </p>
                    <p>
                        <a href="ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>
</div>
</body>



@code
{
    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }


    [Parameter] public int Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }


    private bool _signinFailed;
    List<AppUser> _users = null;
    AppUser _user = new AppUser();
    EmailDTO _email = new EmailDTO();

    private static readonly HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {
        _users = await HttpClient.GetFromJsonAsync<List<AppUser>>(APIEndpoints.s_users);

        HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);

        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

        var user = (await AuthenticationState).User;

        if (user.Identity.IsAuthenticated == true)
        {

        }

    }

    private async Task ResetPassword(){

        

        

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<EmailDTO>(APIEndpoints.s_email,_email);

         if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo($"/login");
        }
        else
        {
            string serverError = await response.Content.ReadAsStringAsync();
            Console.WriteLine(serverError);
            

        }


       
    }

     private async Task<AppUser> GetUser(){

        var user2 = (await AuthenticationState).User;

        AppUser _user = _users.Where(m => m.Email == user2.Identity.Name).FirstOrDefault();

        return _user;
    }
}