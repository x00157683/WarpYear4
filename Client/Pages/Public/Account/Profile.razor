@page "/profile"
@using System.Net;
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using System.Net.Http.Json;
@using System.Net.Http.Headers
@using global::Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using System.Text;
@using Blazored.LocalStorage
@using Microsoft.EntityFrameworkCore



<PageTitle>Warp</PageTitle>

<NavB />


    <main class="flex-shrink-0">
        <div class="container">
    <div class="row py-5">
        <div class="col">
            <RadzenCard>

                  <RadzenDataList WrapItems="true" AllowPaging="true" Data="@_userBookings" TItem="BookingDTO" PageSize="5" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
                    <Template Context="product">
                        <RadzenCard Style="width: 100%; padding: 0; overflow: hidden;">
                            <div class="container">
                                <div class="row">
                                    <div class="col-lg-3 p-3 product-title">
                                        <h5 class="mb-0 text-secondary">Booking ID:</h5>
                                            @(product.BookingDTOId)
                                    </div>
                                    <div class="col-lg-7 p-3">
                                        <div class="row d-flex">
                                            <div class="col-md-6 col-lg-2">
                                                <h5 class="mb-0">Model</h5>
                                                <p class="mb-sm-2 mb-lg-0"> @( GetCar(product.CarId)?.Make) @( GetCar(product.CarId)?.Model)</p>
                                            </div>
                                            <div class="col-md-6 col-lg-2">
                                                 <h5 class="mb-0">Email</h5>
                                                <p class="mb-sm-2 mb-lg-0">@(product.UserEmail)</p>
                                            </div>
                                            <div class="col-md-6 col-lg-5">
                                              
                                                <h5 class="mb-0">Start Time</h5>
                                                <p class="mb-sm-2 mb-lg-0">@(product.StartTime)</p>
                                            </div>
                                            <div class="col-md-6 order-first order-lg-last col-lg-3 text-sm-left text-lg-right mb-3 mb-lg-0">
                                                <RadzenBadge BadgeStyle="BadgeStyle.Secondary" Class="price-badge" Text=@($"{String.Format(new System.Globalization.CultureInfo("en-US"), "{0:C}", product?.Cost)}") />
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-lg-2 p-3">
                                        <RadzenButton Text = "End Booking" Click="@(() => EndBooking(product))" Class="w-100" />
                                    </div>
                                </div>
                            </div>
                        </RadzenCard>
                    </Template>
                </RadzenDataList>

            </RadzenCard>
        </div>
    </div>
</div>


   
    </main>
    <!-- Footer-->
    <footer class="bg-dark py-4 mt-auto">
        <div class="container px-5">
            <div class="row align-items-center justify-content-between flex-column flex-sm-row">
                <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
                <div class="col-auto">
                    <a class="link-light small" href="#!">Privacy</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Terms</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Contact</a>
                </div>
            </div>
        </div>
    </footer>
    
        <style>
            .product-title {
                min-height: 72px;
                color: #da0074;
               
                font-size: 14px;
                font-weight: bold;
                line-height: 20px;
                letter-spacing: -0.02em;
            }

            .price-badge {
                font-size: 16px;
                font-weight: bold;
                line-height: 20px;
                padding: 8px;
            }
        </style>

@code {

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] NavigationManager NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    [Parameter] public string Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState> AuthenticationState { get; set; }

    private bool _attemptingToUpdate { get; set; } = false;
    private bool _attemptToUpdateFailed { get; set; } = false;
    private bool _updateSuccessful { get; set; } = false;
    List<Car> _cars = new List<Car>();
    List<AppUser> _users = new List<AppUser>();
    List<Booking> _bookings = new List<Booking>();
    List<BookingDTO> _userBookings = new List<BookingDTO>();
    AppUser _user = new AppUser();
    Car _car = new Car();
    double _cost = 0;

    TimeSpan elapsed = new TimeSpan();

    BookingDTO ThisBooking = new BookingDTO();
    BookingDTO _book = new BookingDTO();

    private static readonly HttpClient client = new HttpClient();

    protected override async Task OnInitializedAsync()
    {

        try
        {
            _users = await HttpClient.GetFromJsonAsync<List<AppUser>>(APIEndpoints.s_users);

            _bookings = await HttpClient.GetFromJsonAsync<List<Booking>>(APIEndpoints.s_bookings);

            HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);

            _cars = await response.Content.ReadFromJsonAsync<List<Car>>();

            _user = await GetUser();



            ThisBooking = GetBooking();

            _car = GetCar(ThisBooking.CarId);




        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.InnerException);
        }

        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

    }

    private async Task EndBooking(BookingDTO toEnd)
    {

        _attemptingToUpdate = true;

        try
        {



        }
        catch (Exception ex)
        {
            ErrorModelDTO error = new ErrorModelDTO { ErrorMessage = ex.Message };
            Console.WriteLine(error.ErrorMessage);
        }

        if (HttpClient != null)
        {
            HttpResponseMessage response = await HttpClient.PutAsJsonAsync<BookingDTO>($"{APIEndpoints.s_bookings}/{toEnd.BookingDTOId}", toEnd);

            if (response.StatusCode == HttpStatusCode.Created)
            {
                _attemptingToUpdate = false;
                _updateSuccessful = true;
                NavigationManager.NavigateTo($"/checkout/{toEnd.BookingDTOId}");

            }
            else
            {
                _attemptToUpdateFailed = true;
            }
        }
    }

    private async Task<AppUser> GetUser()
    {

        AppUser _user = new AppUser();
        if (_users != null)
        {
            var user2 = (await AuthenticationState).User;

            _user = _users.Where(m => m.Email == user2.Identity.Name).FirstOrDefault();

        }

        return _user;
    }

    private Car GetCar(int id)
    {

        if (_cars != null)
        {
            _car = _cars.Where(m => m.CarId == id).FirstOrDefault();
        }
        return _car;
    }

    private BookingDTO GetBookingsByEmail()
    {


        if (_bookings != null)
        {


        }
        return _book;
    }

    private BookingDTO GetBooking()
    {
        if (_bookings != null)
        {
            foreach (var i in _bookings)
            {

                if (i.UserEmail.ToUpper() == _user.UserName.ToUpper() && i.IsComplete != true)
                {

                    _book.BookingDTOId = i.BookingId;
                    _book.CarId = i.CarId;
                    _book.IsCreated = i.IsCreated;
                    _book.StartTime = i.StartTime;
                    _book.UserEmail = i.UserEmail;
                    _book.Location = i.Location;
                    _book.IsComplete = true;

                }
                if (i.UserEmail.ToUpper() == _user.UserName.ToUpper())
                {
                    BookingDTO _b = new BookingDTO();

                    _b.BookingDTOId = i.BookingId;
                    _b.CarId = i.CarId;
                    _b.IsCreated = i.IsCreated;
                    _b.StartTime = i.StartTime;
                    _b.UserEmail = i.UserEmail;
                    _b.Location = i.Location;
                    _b.IsComplete = false;
                    _b.Cost = GetCost(_b);
                    _userBookings.Add(_b);

                }
            }
        }
        return _book;
    }

    public double GetCost(BookingDTO _b)
    {
        DateTime _dObject = new DateTime();
        DateTime currentDate = new DateTime();


        _dObject = Convert.ToDateTime(_b.StartTime);
        currentDate = DateTime.Now;
        long elapsedTicks = currentDate.Ticks - _dObject.Ticks;
        TimeSpan elapsedSpan = new TimeSpan(elapsedTicks);

     

        _cost = Math.Round(11.00 * elapsedSpan.TotalHours, 2);


        return _cost;

    }

    public void Dispose()
    {

        InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    }

}
