@page "/registercomplete"
@using System.Net;
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using System.Net.Http.Json;
@using global::Shared.Models;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.IdentityModel.Tokens;
@using System.IdentityModel.Tokens.Jwt;
@using System.Security.Claims;
@using System.Text;
@using Blazored.LocalStorage


<head>
    <!-- Required meta tags -->


</head>


<PageTitle>Warp</PageTitle>

 <div class=" w-200 min-vh-90 justify-content-center align-items-center">

     <h4>Sucessfully Registered</h4>
     <h4>Welcome Please Upload Your Documents to Get Driving</h4>

    
    <EditForm Model="_userToSignin" OnValidSubmit="SigninUser">
    <DataAnnotationsValidator/>
    <div class="py-4">
        <div class=" row form-group ">
            <div class="col-6 offset-3 ">
                <div class="card border">
                    <div class="card-body px-lg-5 pt-4">
                        <h3 class="col-12 text-success text-center py-2">
                            <strong>Sign In</strong>
                        </h3>

                        @if (_signinFailed)
                        {
                            <p class="text-center text-danger"></p>
                        }


                        <div class="py-2">
                               <InputText @bind-Value="_userToSignin.EmailAddress" id="email" placeholder="Email..." class="form-control mb-2" />
                               <ValidationMessage For="(()=>_userToSignin.EmailAddress)"></ValidationMessage>
                        </div>
                        <div class="py-2">
                            <InputText @bind-Value="_userToSignin.Password" type="password" placeholder="Password..." id="password" class="form-control mb-2" />
                            <ValidationMessage For="(()=>_userToSignin.Password)"></ValidationMessage>
                        </div>
                        <div class="py-2">
                            <button type="submit" class="btn btn-success btn-block"><i class="bi bi-person-bounding-box"></i> Sign in</button>
                            <a href="/registration" class="btn btn-primary text-white m-2"><i class="bi bi-person-plus-fill"></i> Register as a new user</a>
                        </div>
                    </div>
                     <div class="px-6">
                    <p>
                        <a href="/forgotpassword">Forgot your password??</a>
                    </p>
                    <p>
                        <a href="/register">Register as a new user</a>
                    </p>
                    <p>
                        <a href="ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>
</div>




@code
{
    [Inject] InMemoryDatabaseCache InMemoryDatabaseCache { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }
    [Inject] HttpClient HttpClient { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    [Inject] AuthenticationStateProvider authenticationStateProvider { get; set; }
    [Inject] AppAuthenticationStateProvider appAuthenticationStateProvider { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }

    //protected async override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        if (InMemoryDatabaseCache.Cars == null)
    //        {
    //            await InMemoryDatabaseCache.GetCarsFromDatabaseAndCache();
    //            StateHasChanged();
    //        }
    //    }
    //}



    private User _userToSignin = new User();
    private bool _attemptingToSignin = false;
    private bool _signinSuccessful = false;
    private bool _signinFailed = false;

    private async Task SigninUser()
    {
        _attemptingToSignin = false;


        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<User>(APIEndpoints.s_signIn, _userToSignin);

        if (response.IsSuccessStatusCode)
        {
            string jsonWebToken = await response.Content.ReadAsStringAsync();

            await LocalStorageService.SetItemAsync("bearerToken", jsonWebToken);

            await ((AppAuthenticationStateProvider)authenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", jsonWebToken);

            _signinSuccessful = true;

             StateHasChanged();
             NavigationManager.NavigateTo("/");
            
        }
        else
        {
            _attemptingToSignin = true;

        }


    }

	}
}