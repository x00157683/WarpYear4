@page "/bookcar/{Id:int}"
@inject HttpClient Http
@implements IDisposable
@using Blazored.LocalStorage
@using Client.Components.Public.Shared
@using Client.Components.Public.Warp
@using Client.Providers
@using Client.Services
@using Newtonsoft.Json
@using global::Shared.Models
@using System.Net.Http.Headers
using System.Collections.Generic;
using System.Text.Json;
using System.Net.Http;


<head>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Warp</title>
    <link rel="stylesheet" href="assets/vendors/mdi/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="assets/vendors/css/vendor.bundle.base.css">
    <link rel="stylesheet" href="assets/css/style.css">
    <link rel="stylesheet" href="assets/css/">

    <link rel="shortcut icon" href="assets/images/favicon.ico" />
</head>



<NavB />

<PageTitle>Warp</PageTitle>

<body class="d-flex flex-column h-100">


    <!--The div element for the map -->
    <!-- Async script executes immediately and must be after any DOM elements used in callback. -->



    <main class="flex-shrink-0">

        <div id="map"></div>


        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <section class="py-5">
            <div class="container px-5 my-5">
                <div class="row gx-5 justify-content-center">
                    <div class="col-lg-8 col-xl-6">
                        <div class="text-center">
                            <h2 class="fw-bolder">From our Fleet</h2>
                            <p class="lead fw-normal text-muted mb-5">
                                Lorem ipsum, dolor sit amet consectetur adipisicing elit.
                                Eaque fugit ratione dicta mollitia. Officiis ad.
                            </p>
                        </div>
                    </div>
                </div>

                <div class="row gx-5">

                    @if (_cars != null)
                    {
                        foreach (var x in _cars)
                        {

                            if (x.CarId == Id)
                            {
                                <div class="col-4">
                                </div>
                                <div class="col-4">
                                    <div class="card shadow mb-2">

                                        <div class="card-body">

                                            <h3 class="card-title">Make: @x.Make</h3>
                                            <p class="card-text">Model: @x.Model</p>
                                            <p class="card-text">Tier: @x.Category.Name</p>
                                            <p class="card-text">Range: @x.Range Km</p>
                                            <p class="card-text">Price: $@x.PricePerUnit</p>
                                                   <EditForm Model="_booking" OnValidSubmit="CreateBooking">
                                            <DataAnnotationsValidator />
                                            <div class="form-group my-3 mx-2 ">
                                                <label for="first">Start Date</label>
                                                <InputDate @bind-Value="_booking.StartTime" id="first" @bind-Value:format="dd/MM/yyyy" class="form-control" placeholder= />
                                                <ValidationMessage For="@(() => _booking.StartTime)" />

                                                <label for="first">End Date</label>
                                                <InputDate @bind-Value="_booking.StopTime" id="first" @bind-Value:format="dd/MM/yyyy" class="form-control" />
                                                <ValidationMessage For="@(() => _booking.StopTime)" />


                                            </div>

                                            <ValidationSummary />

                                            <button class="btn btn-success shadow d-block mt-5 md-f-size-1-5" type="submit">
                                                <i class="far fa-save"></i> Book
                                            </button>

                                        </EditForm>
                                        </div>
                                 

                                    </div>
                                </div>
                            }

                        }
                    }
                </div>
            </div>
            <!-- Call to action-->
        </section>
    </main>
    <!-- Footer-->
    <footer class="bg-dark py-4 mt-auto">
        <div class="container px-5">
            <div class="row align-items-center justify-content-between flex-column flex-sm-row">
                <div class="col-auto"><div class="small m-0 text-white">Copyright &copy; Your Website 2021</div></div>
                <div class="col-auto">
                    <a class="link-light small" href="#!">Privacy</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Terms</a>
                    <span class="text-white mx-1">&middot;</span>
                    <a class="link-light small" href="#!">Contact</a>
                </div>
            </div>
        </div>
    </footer>

</body>


@code {

    [Inject] HttpClient? HttpClient { get; set; }
    [Inject] ILocalStorageService? LocalStorageService { get; set; }
    [Inject] NavigationManager? NavigationManager { get; set; }
    [Inject] InMemoryDatabaseCache? InMemoryDatabaseCache { get; set; }
    [Inject] AuthenticationStateProvider? AuthenticationStateProvider { get; set; }

    [Parameter] public int Id { get; set; }
    [CascadingParameter] protected Task<AuthenticationState>? AuthenticationState { get; set; }


    List<Car>? _cars = null;
    List<AppUser>? _users = null;
    AppUser ?_user = null;

    private bool _attemptingToRegister = false;
    private string? _attemptToRegisterFailed = "";
    private bool _registerSuccessful = false;
    private bool _registerFailed = false;
    private BookingDTO _booking = new BookingDTO() { };
    Car? ThisCar = null;
    public DateTime? StartValue { get; set; } = DateTime.Now;
    public DateTime? EndValue { get; set; } = DateTime.Now.AddDays(10);



    private static readonly HttpClient client = new HttpClient();



    protected override async Task OnInitializedAsync()
    {
        _users = await HttpClient.GetFromJsonAsync<List<AppUser>>(APIEndpoints.s_users);

        HttpResponseMessage response = await HttpClient.GetAsync(APIEndpoints.s_cars);


        _cars = await response.Content.ReadFromJsonAsync<List<Car>>();


        foreach (var i in _cars)
        {
            if (i.CarId == Id)
            {
                ThisCar = i;
            }
        }



        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            Console.WriteLine(savedToken);

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

            HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }

        var user = (await AuthenticationState).User;

        if (user.Identity.IsAuthenticated == true)
        {

        }

    }

    private async Task CreateBooking()
    {

        var user2 = (await AuthenticationState).User;

        // _user = _users.Where(m => m.Email == user2.Identity.Name).FirstOrDefault();

        _booking.Email = "test@gmail.com";//_user.Email;

        _booking.Cost = 100;

        HttpResponseMessage response = await HttpClient.PostAsJsonAsync<BookingDTO>(APIEndpoints.s_bookings, _booking);

        if (response.IsSuccessStatusCode)
        {
            _registerSuccessful = true;
        }
        else
        {
            string serverError = await response.Content.ReadAsStringAsync();
            _attemptToRegisterFailed = $"{serverError} The following error has occured";
            _registerFailed = true;

        }

        _attemptingToRegister = false;
    }


    public void Dispose()
    {

        InMemoryDatabaseCache.OnCategoriesDataChanged -= StateHasChanged;

    }




}

