@using Blazored.LocalStorage
@using Client.Providers
@using System.Net.Http.Headers

<header>

    <AuthorizeView Roles="Administrator">
        <Authorized Context="Auth">
            <div class="shadow-no-hover bg-light p-3">
                <p class="d-inline ms-lg-5">You're seeing this bar because you're signed in as the administrator</p>

                <a href="/" class="btn bg-lightgray hover-bg-white shadow text-dark ms-3 mx-2 md-and-smaller-my-3">
                    <i class="fas fa-wrench"></i> <p class="md-and-smaller-d-none d-inline">Public area</p>
				</a>

                <button @onclick="SignOut" class="btn bg-lightgray hover-bg-white shadow text-dark mx-2 md-and-smaller-my-3">
                    <i class="fas fa-sign-out-alt"></i> <p class="md-and-smaller-d-none d-inline">Sign out</p>
				</button>
			</div>
		</Authorized>
	</AuthorizeView>

    
</header>



@code 
{
    protected override async Task OnInitializedAsync() => await SignInWithBrowserLocalStorageBearerToken();

    [Inject] HttpClient HttpClient { get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] ILocalStorageService LocalStorageService { get; set; }
    private async Task SignInWithBrowserLocalStorageBearerToken()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            string savedToken = await LocalStorageService.GetItemAsync<string>("bearerToken");

            await ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignIn();

			HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("bearer", savedToken);

            StateHasChanged();
        }        
    }

    private async Task SignOut()
    {
        if (await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            await LocalStorageService.RemoveItemAsync("bearerToken");

            ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignOut();

            StateHasChanged();
        }
    }

    // Public and CamelCase because C# properties are methods.
    [Inject] public NavigationManager NavigationManager { get; set; }

    private const string HomePageUri = "/";
    private const string SkillsPageUri = "/skills";
    private const string PortfolioPageUri = "/portfolio";
    private const string BlogPageUri = "/blog";
    private const string AboutPageUri = "/about";
    private const string ContactPageUri = "/contact";

    private bool IsPageActive(string pageToCheckUri)
    {
        // Skip(3) to remove https://domainname/
        string[] currentUriSplitBetweenSlashes = NavigationManager.Uri.Split('/').Skip(3).ToArray();

        if (pageToCheckUri == HomePageUri)
        {
            if (currentUriSplitBetweenSlashes.Last().Length == 0)
            {
                return true;
            }
        }
        else
        {
            string[] pageToCheckUriSplitBetweenSlashes = pageToCheckUri.Split('/').Skip(1).ToArray();

            foreach (string currentUriPart in currentUriSplitBetweenSlashes)
            {
                foreach (string pageToCheckUriPart in pageToCheckUriSplitBetweenSlashes)
                {
                    if (pageToCheckUriPart == currentUriPart)
                    {
                        return true;
                    }
                }
            }
        }

        // If the code gets here pageToCheckUri is not the active page. So return false.
        return false;
    }
}