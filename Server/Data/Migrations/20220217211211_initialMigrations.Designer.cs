// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Data;

#nullable disable

namespace Server.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20220217211211_initialMigrations")]
    partial class initialMigrations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("Shared.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CarID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Cost")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TimeLapsed")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CarID")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarID = 5,
                            Cost = 88.0,
                            IsComplete = true,
                            StartTime = new DateTime(2022, 2, 17, 21, 12, 11, 350, DateTimeKind.Local).AddTicks(467),
                            TimeLapsed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CarID = 1,
                            Cost = 98.0,
                            IsComplete = true,
                            StartTime = new DateTime(2022, 2, 17, 21, 12, 11, 350, DateTimeKind.Local).AddTicks(535),
                            TimeLapsed = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Shared.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("PricePerUnit")
                        .HasColumnType("REAL");

                    b.Property<double>("Range")
                        .HasColumnType("REAL");

                    b.Property<double>("RangeLeft")
                        .HasColumnType("REAL");

                    b.Property<bool>("isLocked")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Make = "Tesla",
                            Model = "Model X",
                            PricePerUnit = 7.0,
                            Range = 250.0,
                            RangeLeft = 100.0,
                            isLocked = true
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Make = "Tesla",
                            Model = "Model S",
                            PricePerUnit = 7.0,
                            Range = 200.0,
                            RangeLeft = 100.0,
                            isLocked = true
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Make = "Porsche",
                            Model = "Taycan",
                            PricePerUnit = 7.0,
                            Range = 270.0,
                            RangeLeft = 100.0,
                            isLocked = true
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Make = "Nissan",
                            Model = "Leaf",
                            PricePerUnit = 7.0,
                            Range = 150.0,
                            RangeLeft = 100.0,
                            isLocked = true
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Make = "Honda",
                            Model = "Up!",
                            PricePerUnit = 7.0,
                            Range = 220.0,
                            RangeLeft = 100.0,
                            isLocked = true
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Make = "Toyota",
                            Model = "GT",
                            PricePerUnit = 7.0,
                            Range = 200.0,
                            RangeLeft = 100.0,
                            isLocked = true
                        });
                });

            modelBuilder.Entity("Shared.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            Description = "Description 1",
                            Name = "Category 1"
                        },
                        new
                        {
                            CategoryID = 2,
                            Description = "Description 2",
                            Name = "Category 2"
                        },
                        new
                        {
                            CategoryID = 3,
                            Description = "Description 3",
                            Name = "Category 3"
                        });
                });

            modelBuilder.Entity("Shared.Models.License", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("YearsHeld")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("dob")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("License");
                });

            modelBuilder.Entity("Shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LicenseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Shared.Models.Booking", b =>
                {
                    b.HasOne("Shared.Models.Car", "car")
                        .WithOne("Booking")
                        .HasForeignKey("Shared.Models.Booking", "CarID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Models.User", null)
                        .WithMany("Bookings")
                        .HasForeignKey("UserId");

                    b.Navigation("car");
                });

            modelBuilder.Entity("Shared.Models.Car", b =>
                {
                    b.HasOne("Shared.Models.Category", "Category")
                        .WithMany("Cars")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shared.Models.User", b =>
                {
                    b.HasOne("Shared.Models.License", "License")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("License");
                });

            modelBuilder.Entity("Shared.Models.Car", b =>
                {
                    b.Navigation("Booking")
                        .IsRequired();
                });

            modelBuilder.Entity("Shared.Models.Category", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("Shared.Models.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
